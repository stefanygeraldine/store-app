{"version":3,"sources":["services/ProductsService.js","form/Form.js","const/httpStatus.js","assets/fondo.jpg","App.js","reportWebVitals.js","index.js"],"names":["saveProduct","name","size","type","fetch","method","headers","body","JSON","stringify","Form","useState","isSaving","setIsSaving","serverMessage","setServerMessage","formErrors","setFormErrors","validateFields","value","prevProps","validateForm","getFormValues","handleError","error","a","status","json","data","message","handleSubmit","e","preventDefault","target","elements","response","ok","reset","handleBlur","Container","maxWidth","Typography","component","variant","align","style","color","fontSize","Card","padding","backgroundColor","onSubmit","noValidate","autoComplete","Grid","container","spacing","justify","alignItems","item","md","sm","xs","TextField","width","label","id","helperText","length","onBlur","InputLabel","htmlFor","marginBottom","Select","native","inputProps","onChange","FormHelperText","Button","disabled","aria-disabled","App","backgroundImage","Background","height","backgroundRepeat","backgroundPosition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAAaA,EAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAd,OAAuBC,MAAM,YAAa,CACnEC,OAAQ,OACRC,QAAQ,CACN,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACR,OAAMC,OAAMC,YCyLrBO,EA/KF,WAAO,IAAD,EACiBC,oBAAS,GAD1B,mBACTC,EADS,KACCC,EADD,OAG2BF,mBAAS,IAHpC,mBAGTG,EAHS,KAGMC,EAHN,OAIqBJ,mBAAS,CAC7CV,KAAM,GACNC,KAAM,GACNC,KAAM,KAPS,mBAITa,EAJS,KAIGC,EAJH,KAUXC,EAAiB,SAAC,GAAmB,IAAlBjB,EAAiB,EAAjBA,KAAMkB,EAAW,EAAXA,MAC7BF,GAAc,SAACG,GAAD,mBAAC,eACVA,GADS,kBAEXnB,EAAOkB,EACJ,GADS,cAEFlB,EAFE,sBAMXoB,EAAe,SAAC,GAAwB,IAAvBpB,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAEjCe,EAAe,CAACjB,KAAM,OAAQkB,MAAOlB,IACrCiB,EAAe,CAACjB,KAAM,OAAQkB,MAAOjB,IACrCgB,EAAe,CAACjB,KAAM,OAAQkB,MAAOhB,KAGjCmB,EAAgB,SAACrB,EAAMC,EAAMC,GAAb,MAAuB,CAC3CF,KAAMA,EAAKkB,MACXjB,KAAMA,EAAKiB,MACXhB,KAAMA,EAAKgB,QAGPI,EAAW,uCAAG,WAAMC,GAAN,eAAAC,EAAA,yDC9Ca,MDgD1BD,EAAME,OAFO,uBAGhBX,EAAiB,+BAHD,6BC7CgB,MDoD7BS,EAAME,OAPO,gCAQGF,EAAMG,OART,cAQVC,EARU,OAShBb,EAAiBa,EAAKC,SATN,0BAalBd,EAAiB,sCAbC,4CAAH,sDAiBXe,EAAY,uCAAG,WAAMC,GAAN,uBAAAN,EAAA,6DACnBM,EAAEC,iBACFnB,GAAY,GAFO,EAGQkB,EAAEE,OAAOC,SAA7BjC,EAHY,EAGZA,KAAMC,EAHM,EAGNA,KAAMC,EAHA,EAGAA,KAEnBkB,EAAaC,EAAcrB,EAAMC,EAAMC,IALpB,kBAOMH,EAAYsB,EAAcrB,EAAMC,EAAMC,IAP5C,WAOXgC,EAPW,QAQJC,GARI,uBASTD,EATS,QChEO,MD2EnBA,EAAST,SACZK,EAAEE,OAAOI,QACTtB,EAAiB,mBAbF,kDAgBjBQ,EAAY,EAAD,IAhBM,QAmBnBV,GAAY,GAnBO,0DAAH,sDAuBZyB,EAAa,SAAAP,GAAM,IAAD,EACAA,EAAEE,OAAjBhC,EADe,EACfA,KAAMkB,EADS,EACTA,MAEbD,EAAe,CAACjB,OAAMkB,WAGxB,OACE,eAACoB,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,uBACA,uBACA,cAACC,EAAA,EAAD,CACEC,UAAU,KACVC,QAAQ,KACRC,MAAM,SACNC,MAAO,CACLC,MAAO,UACPC,SAAU,IANd,6BASA,cAACN,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,QAAlC,SAA2C7B,IAE3C,uBACA,cAACkC,EAAA,EAAD,CACEH,MAAO,CACLI,QAAS,GACTC,gBAAiB,6BAHrB,SAKE,sBAAMC,SAAUrB,EAAcsB,YAAU,EAACC,aAAa,MAAtD,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,SAAxD,UACE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA9B,SACE,cAACC,EAAA,EAAD,CACEpB,QAAQ,WACRE,MAAO,CAACmB,MAAM,QACdC,MAAM,OACNC,GAAG,OACHjE,KAAK,OACLkE,WAAYnD,EAAWf,KACvBuB,QAASR,EAAWf,KAAKmE,OACzBC,OAAQ/B,MAGZ,cAACgB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA9B,SACE,cAACC,EAAA,EAAD,CACEpB,QAAQ,WACRE,MAAO,CAACmB,MAAM,QACdC,MAAM,OACNC,GAAG,OACHjE,KAAK,OACLkE,WAAYnD,EAAWd,KACvBsB,QAASR,EAAWd,KAAKkE,OACzBC,OAAQ/B,MAGZ,eAACgB,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,UACE,cAACQ,EAAA,EAAD,CAAYC,QAAQ,OAAO1B,MAAO,CAChC2B,aAAc,GADhB,kBAGA,eAACC,EAAA,EAAD,CACE9B,QAAQ,WACRnB,QAASR,EAAWb,KAAKiE,OACzBvB,MAAO,CAACmB,MAAM,QACdU,QAAM,EACNC,WACE,CAACT,GAAI,QAEPU,SAAU,WACR3D,GAAc,SAACG,GAAD,mBAAC,eACVA,GADS,IAEZjB,KAAM,SAXZ,UAgBE,wBAAQgB,MAAM,GAAd,wBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,WAAd,2BAECH,EAAWb,KAAKiE,QACnB,cAACS,EAAA,EAAD,CAAgBrD,QAASR,EAAWb,KAAKiE,OAAzC,SAAkDpD,EAAWb,UAG/D,cAACmD,EAAA,EAAD,CAAMK,MAAI,EAAV,SACE,cAACmB,EAAA,EAAD,CACEC,SAAUnE,EACVoE,gBAAepE,EACfT,KAAK,SACL0C,MAAO,CACLK,gBAAiB,UACjBJ,MAAO,OACPkB,MAAO,SAPX,iCE1KC,MAA0B,kCCkB1BiB,MAdf,WACE,OACE,qBAAKpC,MAAO,CACVqC,gBAAgB,OAAD,OAASC,EAAT,KACfC,OAAQ,QACRC,iBAAkB,YAClBC,mBAAoB,eACpBpC,gBAAiB,WALnB,SAOE,cAAC,EAAD,OCDSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08471a17.chunk.js","sourcesContent":["export const saveProduct = ({name, size, type})=> fetch('/products', {\n  method: 'POST',\n  headers:{\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({name, size, type})\n})\n\nexport default {\n  saveProduct\n}","import React, {useState} from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Select from '@material-ui/core/Select'\n\nimport  Container from '@material-ui/core/Container'\nimport  Grid from '@material-ui/core/Grid'\nimport  Card from '@material-ui/core/Card'\nimport  Typography from '@material-ui/core/Typography'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport Button from '@material-ui/core/Button'\nimport {CREATED_STATUS, INVALID_REQUEST_STATUS, SERVER_ERROR_STATUS} from '../const/httpStatus'\n\nimport {saveProduct} from '../services/ProductsService'\n\nconst Form = () => {\n  const [ isSaving, setIsSaving ] = useState(false)\n\n  const [ serverMessage, setServerMessage ] = useState('')\n  const [ formErrors, setFormErrors ] = useState({\n    name: '',\n    size: '',\n    type: '',\n  })\n\n  const validateFields = ({name, value}) => {\n    setFormErrors((prevProps) => ( {\n      ...prevProps,\n      [name]: value\n        ? ''\n        : `The ${name} is required`\n    } ))\n  }\n\n  const validateForm = ({name, size, type}) => {\n\n    validateFields({name: 'name', value: name})\n    validateFields({name: 'size', value: size})\n    validateFields({name: 'type', value: type})\n  }\n\n  const getFormValues = (name, size, type) => ({\n    name: name.value,\n    size: size.value,\n    type: type.value\n  })\n\n  const handleError = async error => {\n\n    if ( error.status === SERVER_ERROR_STATUS ) {\n      setServerMessage('Unexpected error, Try again')\n      return\n    }\n\n    if ( error.status === INVALID_REQUEST_STATUS ) {\n      const data = await error.json()\n      setServerMessage(data.message)\n      return\n    }\n\n    setServerMessage('Connection error, please try later')\n\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault()\n    setIsSaving(true)\n    const {name, size, type} = e.target.elements\n\n    validateForm(getFormValues(name, size, type))\n    try{\n      const response = await saveProduct(getFormValues(name, size, type))\n      if(!response.ok){\n        throw response\n      }\n      if ( response.status === CREATED_STATUS ) {\n        e.target.reset()\n        setServerMessage('Product stored')\n      }\n    }catch (error) {\n      handleError(error)\n    }\n\n    setIsSaving(false)\n\n  }\n\n  const handleBlur = e => {\n    const {name, value} = e.target\n\n    validateFields({name, value})\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <br/>\n      <br/>\n      <Typography\n        component=\"h1\"\n        variant=\"h5\"\n        align=\"center\"\n        style={{\n          color: '#d65382',\n          fontSize: 35,\n        }}\n      >Create Products</Typography>\n      <Typography component=\"p\" variant=\"body1\">{serverMessage}</Typography>\n\n      <br/>\n      <Card\n        style={{\n          padding: 40,\n          backgroundColor: 'rgba(255, 255, 255, 0.45)'\n        }}>\n        <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\n          <Grid container spacing={4} justify=\"center\" alignItems=\"center\">\n            <Grid item md={6} sm={12} xs={12}>\n              <TextField\n                variant=\"outlined\"\n                style={{width:'100%'}}\n                label=\"Name\"\n                id=\"name\"\n                name=\"name\"\n                helperText={formErrors.name}\n                error={!!formErrors.name.length}\n                onBlur={handleBlur}\n              />\n            </Grid>\n            <Grid item md={6} sm={12} xs={12}>\n              <TextField\n                variant=\"outlined\"\n                style={{width:'100%'}}\n                label=\"Size\"\n                id=\"size\"\n                name=\"size\"\n                helperText={formErrors.size}\n                error={!!formErrors.size.length}\n                onBlur={handleBlur}\n              />\n            </Grid>\n            <Grid item md={12} sm={12} xs={12}>\n              <InputLabel htmlFor=\"type\" style={{\n                marginBottom: 5\n              }}>Type</InputLabel>\n              <Select\n                variant=\"outlined\"\n                error={!!formErrors.type.length}\n                style={{width:'100%'}}\n                native\n                inputProps={\n                  {id: \"type\"}\n                }\n                onChange={()=>{\n                  setFormErrors((prevProps) => ( {\n                    ...prevProps,\n                    type: ''\n                  } ))\n                }}\n              >\n\n                <option value=\"\">seleccione</option>\n                <option value=\"electronic\">electronic</option>\n                <option value=\"furniture\">furniture</option>\n                <option value=\"clothing\">clothing</option>\n              </Select>\n              {!!formErrors.type.length &&\n              <FormHelperText error={!!formErrors.type.length}>{formErrors.type}</FormHelperText>\n              }\n            </Grid>\n            <Grid item>\n              <Button\n                disabled={isSaving}\n                aria-disabled={isSaving}\n                type=\"submit\"\n                style={{\n                  backgroundColor: '#d65483',\n                  color: '#fff',\n                  width: '120px',\n                }}\n              >Submit</Button>\n            </Grid>\n          </Grid>\n        </form>\n\n      </Card>\n    </Container>\n  )\n}\n\n\nexport default Form","export const CREATED_STATUS = 201\nexport const SERVER_ERROR_STATUS = 500\nexport const INVALID_REQUEST_STATUS = 400\n\nexport default {\n  CREATED_STATUS,\n  SERVER_ERROR_STATUS,\n  INVALID_REQUEST_STATUS\n}","export default __webpack_public_path__ + \"static/media/fondo.da89ad47.jpg\";","import React from 'react'\nimport Form from \"./form/Form\";\nimport Background from './assets/fondo.jpg'\n\nfunction App() {\n  return (\n    <div style={{\n      backgroundImage: `url(${Background})`,\n      height: '100vh',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'right bottom',\n      backgroundColor: '#e0d28b',\n    }}>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}